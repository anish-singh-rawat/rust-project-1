type DaoInput = record {
  members : vec principal;
  linksandsocials : vec text;
  daotype : text;
  dao_name : text;
  link_of_document : text;
  tokenissuer : text;
  cool_down_period : text;
  purpose : text;
  required_votes : int8;

  // image
  image_id: text;
  image_content : blob;
  image_title : text;
  image_content_type : text;

};

type Comment = record {
  author_principal : principal;
  comment_text : text;
  replies : vec text;
  comment_id : opt text;
};

type PostInfo = record {
  username : text;
  post_img : text;
  post_id : text;
  comment_count : nat32;
  // post_title : text;
  like_count : nat32;
  like_id_list : vec principal;
  post_description : text;
  // comment_list : vec text;
  comment_list : vec Comment;
  post_created_at : nat64;
  user_image_id : text;
  is_liked: nat32;

};

type PostInput = record {
  username : text;
  post_img : text;
  //  post_title : text;
  post_description : text;
  user_image_id : text;

  // image
  image_content : blob;
  image_title : text;
  image_content_type : text;
};
type Profileinput = record {
  username : text;
  twitter_id : text;
  description : text;
  website : text;
  contact_number : text;
  email_id : text;
  profile_img : text;
  telegram : text;
  tag_defines : vec text;
  user_image_id : text;

  // image
  image_content : blob;
  image_title : text;
  image_content_type : text;

};

type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : PostInfo; Err : text };
type Result_3 = variant { Ok : UserProfile; Err : text };
type Result_4 = variant { Ok : vec record { text; PostInfo }; Err : text };
type Result_5 = variant { Ok : vec principal; Err : text };
type UserProfile = record {
  post_id : vec text;
  username : text;
  dao_ids : vec text;
  twitter_id : text;
  description : text;
  followers_list : vec principal;
  post_count : nat32;
  followings_count : nat32;
  user_id : principal;
  website : text;
  contact_number : text;
  email_id : text;
  followers_count : nat32;
  profile_img : text;
  telegram : text;
  tag_defines : vec text;
  followings_list : vec principal;
};

type CommentInfo = record {
  comment_id : text;
  comment : text;
  post_id : text;
};

type DaoDetails = record {
  dao_id : principal;
  dao_name : text;
  image_id : text;
  dao_canister_id : text;
};

type AnalyticsResponse = variant { Ok : Analytics; Err : text };

type Analytics = record {
  members_count : nat64;
  proposals_count : nat64;
  dao_counts : nat64;
  post_count : nat64;
};

type Pagination = record {
  start : nat32;
  end : nat32;
};

type UserResponse = variant {
  Ok : text;
  Err : text;
};

type PaymentResponse = variant {
  Ok : nat64;
  Err : text;
};

type InitArgs = record {
  payment_recipient : principal;
};

type PostSize = nat32;

type GetAllPostsResult = record {
  posts : vec PostInfo;
  size : PostSize;
};

type ImageParams = record {
  content : opt blob;
  name : text;
  content_type : text;
};

service : (InitArgs) -> {
  update_profile : (text, Profileinput) -> (Result_1);
  comment_post : (text, text) -> (Result);
  create_dao : (text, DaoInput) -> (Result);
  create_new_post : (text, PostInput) -> (Result);
  check_user_existance : () -> (UserResponse) query;
  create_profile : () -> (Result_1);
  delete_profile : () -> (Result_1);
  follow_user : (principal) -> (Result_1);
  get_all_posts : (Pagination) -> (GetAllPostsResult) query;

  get_post_byid : (text) -> (Result_2) query;
  get_user_profile : () -> (Result_3) query;
  like_post : (text) -> (Result);

  get_my_post : (Pagination) -> (variant { Ok : GetAllPostsResult; Err : text }) query;

  reply_comment : (CommentInfo) -> (Result);
  get_my_follower : () -> (Result_5);
  get_my_following : () -> (Result_5);
  get_all_dao : (Pagination) -> (vec DaoDetails);
  get_dao_details : (text) -> (text);
  get_analytics : () -> (AnalyticsResponse) query;
  get_caller : () -> (principal) query;
  get_canister_id : () -> (text) query;
  make_payment : (nat64, principal) -> (text);
  get_latest_post : (Pagination) -> (GetAllPostsResult) query;
  update_proposal_count : () -> (text);
  upload_image : (text, ImageParams) -> (variant {Ok: text; Err: text});
};
